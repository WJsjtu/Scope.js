const List = Scope.createClass({
    data: [],
    beforeMount: function () {
        console.log('beforeMount');
    },
    afterMount: function ($component) {
        console.log('afterMount', $component);
    },
    afterUpdate: function ($component) {
        console.log('afterUpdate', $component);
    },
    getRandom: function () {
        this.data = [];
        for (let i = 0; i < 10; i++) {
            this.data.push(Math.random());
        }
    },
    generate: function ($this, event) {
        Scope.utils.stopPropagation(event);
        this.getRandom();
        Scope.utils.update(
            Scope.utils.getRefs($this).ul2
        );
    },
    onActive: {
        'li': function ($this, event) {
            Scope.utils.stopPropagation(event);
            $this.closest('ul').find('li.active').removeClass('active');
            $this.addClass('active');
        }
    },
    getList: function () {
        return this.data.map(function (ele) {
            return <li onClick={function(){
                console.log(ele);
            }}>{ele}</li>;
        });
    },
    render: function () {
        const me = this;
        me.getRandom();
        return (
            <div>
                <a onClick={me.generate}>{me.props.label || 'update right list'}</a>
                <div>
                    <ul ref="ul1" style="display:inline-block;list-style:none;*zoom:1;*display:inline;"
                        onClick={me.onActive}>
                        {me.getList()}
                    </ul>
                    <ul ref="ul2" style="display:inline-block;list-style:none;*zoom:1;*display:inline;"
                        onClick={me.onActive}>
                        {me.getList}
                    </ul>
                </div>
            </div>
        );
    }
});

const Wrapper = Scope.createClass({
    updateList: function ($this, event) {
        Scope.utils.stopPropagation(event);
        Scope.utils.update(
            Scope.utils.getRefs($this).list
        );
        Scope.utils.execute(
            Scope.utils.getRefs($this).list,
            'getRandom'
        );
        Scope.utils.update(
            Scope.utils.getRefs(
                Scope.utils.getRefs($this).list
            ).ul2
        );
    },
    render: function () {
        return (
            <div>
                <a onClick={this.updateList}>Update List Component</a>
                <List ref="list"/>
            </div>
        );
    }
});

Scope.render(<Wrapper />, mountNode);