!function(){var e=Scope.createElement;!function(e){function n(o){if(t[o])return t[o].exports;var i=t[o]={exports:{},id:o,loaded:!1};return e[o].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}var t={};return n.m=e,n.c=t,n.p="",n(0)}([function(n,t,o){"use strict";var i=o(1);$(function(){Scope.render(e(i,{sourceCode:o(4)}),document.getElementById("helloDemo")),Scope.render(e(i,{sourceCode:o(5)}),document.getElementById("listDemo"))})},function(n,t,o){"use strict";var i=o(2),r=i.utils,s=o(3),l=function(e){return Babel.transform(e,{presets:["es2015"],plugins:["transform-es5-property-mutators","transform-react-jsx","transform-es3-member-expression-literals","transform-es3-property-literals"]}).code.replace(/([^0-9a-zA-Z])(React)(\.createElement\s*\()/g,"$1Scope$3")},a="border-bottom: none !important;border-radius: 3px 3px 0 0;padding: 6px 8px;font-size: 12px;font-weight: bold;color: #c2c0bc;background-color: #f1ede4;display: inline-block;cursor: pointer;",c=i.createClass({afterMount:function d(){setTimeout(function(){var e=this.refs,n=window.CodeMirror(e.editor[0],{value:this.props.sourceCode||"",mode:"javascript",lineNumbers:!0,lineWrapping:!1,smartIndent:!1,matchBrackets:!0,showCursorWhenSelecting:!1,theme:"scope-light"}),t=window.CodeMirror(e.compile[0],{value:"",mode:"javascript",lineNumbers:!0,readOnly:"nocursor",lineWrapping:!1,smartIndent:!1,matchBrackets:!0,showCursorWhenSelecting:!1,theme:"scope-light"}),o=function i(){var o=n.doc.getValue(),i=e.mountNode[0];try{var r=l(o);s(i).empty(),t.doc.setValue(r);var a="(function (mountNode) {"+r+"})";eval(a)(i)}catch(c){s(i).text(c),console.log(c)}};n.on("change",function(){o()}),o()}.bind(this),1e3)},code:function(e,n){r.stopPropagation(e),this.refs.tabView.css({"margin-left":"0"})},compiledCode:function(e,n){r.stopPropagation(e),this.refs.tabView.css({"margin-left":"-100%"})},render:function(){return e("div",null,e("div",{style:"overflow: hidden;width: 50%;float: left;"},e("div",null,e("span",{onClick:this.code,style:a},"code"),e("span",{onClick:this.compiledCode,style:a},"compiled code")),e("div",{style:"width: 200%;",ref:"tabView"},e("div",{style:"width: 50%;float: left;"},e("div",{"class":"highlight"},e("div",{ref:"editor"}))),e("div",{style:"width: 50%;float: right;"},e("div",{"class":"highlight"},e("div",{ref:"compile"}))))),e("div",{style:"width: 50%;float: right;"},e("div",{ref:"mountNode"})),e("div",{style:"clear: both;"}))}});n.exports=c},function(e,n){e.exports=Scope},function(e,n){e.exports=jQuery},function(e,n){e.exports='var HelloMessage = Scope.createClass({\n    render: function() {\n        return <div>Hello {this.props.name}</div>;\n    }\n});\nScope.render(<HelloMessage name="John" />, mountNode);'},function(e,n){e.exports="const List = Scope.createClass({\n    data: [],\n    beforeMount: function () {\n        console.log('beforeMount');\n    },\n    afterMount: function () {\n        console.log('afterMount');\n    },\n    beforeUpdate: function () {\n        console.log('beforeUpdate');\n    },\n    afterUpdate: function () {\n        console.log('afterUpdate');\n    },\n    getRandom: function () {\n        console.log('getRandom');\n        this.data = [];\n        for (let i = 0; i < 10; i++) {\n            this.data.push(Math.random());\n        }\n    },\n    generate: function (event, $this) {\n        Scope.utils.stopPropagation(event);\n        this.getRandom();\n        Scope.utils.update(this.refs.ul2);\n    },\n    onActive: {\n        'li': function (event, $this, $owner) {\n            Scope.utils.stopPropagation(event);\n            $owner.find('li.active').removeClass('active');\n            $this.addClass('active');\n        }\n    },\n    getList: function () {\n        return this.data.map(function (ele) {\n            return <li onClick={function(){\n                console.log(ele);\n            }}>{ele}</li>;\n        });\n    },\n    render: function () {\n        const me = this;\n        me.getRandom();\n        return (\n            <div>\n                <a onClick={me.generate}>{me.props.label || 'update right list'}</a>\n                <div>\n                    <ul ref=\"ul1\" style=\"display:inline-block;list-style:none;*zoom:1;*display:inline;\"\n                        onClick={me.onActive}>\n                        {me.getList()}\n                    </ul>\n                    <ul ref=\"ul2\" style=\"display:inline-block;list-style:none;*zoom:1;*display:inline;\"\n                        onClick={me.onActive}>\n                        {me.getList}\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n});\n\nconst Wrapper = Scope.createClass({\n    updateList: function (event, $this) {\n        Scope.utils.stopPropagation(event);\n        Scope.utils.update(this.refs.list);\n    },\n    render: function () {\n        return (\n            <div>\n                <a onClick={this.updateList}>Update List Component</a>\n                <List ref=\"list\"/>\n                {this.props.children}\n            </div>\n        );\n    }\n});\n\nScope.render(<Wrapper />, mountNode);"}])}();